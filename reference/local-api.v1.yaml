openapi: 3.0.0
info:
  title: local api
  version: '1.0'
  description: API for the local environment.
servers:
  - url: 'http://localhost:8000'
paths:
  /api/user/myprofile/:
    get:
      summary: fetchUserAPI
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    displayName:
                      type: string
                    avatar:
                      type: string
                    about:
                      type: string
      operationId: get-api-user-myprofile
      description: ログインユーザのプロフィール情報を取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
    parameters: []
  /api/user/follow-list/:
    get:
      summary: fetchFollowAPI
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    askFrom:
                      type: integer
                    askTo:
                      type: integer
                    approved:
                      type: boolean
      operationId: get-api-user-follow-list
      description: ログインユーザのフォローユーザ一覧取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
    parameters: []
  /api/user/follower-list/:
    get:
      summary: fetchFollowerAPI
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    askFrom:
                      type: integer
                    askTo:
                      type: integer
                    approved:
                      type: boolean
      operationId: get-api-user-follower-list
      description: ログインユーザのフォロワー覧取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
  /api/user/friends-list/:
    get:
      summary: fetchFriendsAPI
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    askFrom:
                      type: integer
                    askTo:
                      type: integer
                    approved:
                      type: boolean
                      default: 'true'
      operationId: get-api-user-friends-list
      description: 相互フォローのユーザ一覧を取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
  /api/user/profiles/:
    get:
      summary: fetchUsersAPI
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    displayName:
                      type: string
                    avatar:
                      type: string
                    about:
                      type: string
      operationId: get-api-user-profiles
      description: サービスを利用しているユーザ情報の一覧を取得
    post:
      summary: createUserAPI
      operationId: post-api-user-profiles
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  displayName:
                    type: string
                  avatar:
                    type: string
                  about:
                    type: 'null'
      description: ユーザの新規登録
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                displayName:
                  type: string
                avatar:
                  default: 'null'
                  type: 'null'
                about:
                  type: string
                  default: '""'
      tags:
        - user
    patch:
      summary: patchUserAPI
      operationId: patch-api-user-profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  displayName:
                    type: string
                  avatar:
                    type: string
                  about:
                    type: string
      tags:
        - user
      parameters:
        - schema:
            type: integer
          in: query
          name: '${userId}/'
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
      description: ログインユーザ情報の更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                about:
                  type: string
                avatar:
                  type: string
        description: 更新したい情報がパラメータとして送信される
    parameters: []
    delete:
      summary: deleteUserAPI
      operationId: delete-api-user-profiles
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
      tags:
        - user
      description: ユーザ情報の削除
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: integer
          in: query
          name: '${userId}/'
  /api/user/approval/:
    post:
      summary: createFollowAPI
      operationId: post-api-user-approval
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  askFrom:
                    type: integer
                  askTo:
                    type: integer
                  approved:
                    type: boolean
      tags:
        - user
      description: |-
        フォロー申請を行う。
        フォロー承認のときも自動的にこのAPIが実行される。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                askTo:
                  type: integer
                approved:
                  type: boolean
                  description: ''
              required:
                - askTo
                - approved
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
    patch:
      summary: editFollowerAPI
      operationId: patch-api-user-approval
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  askFrom:
                    type: integer
                  askTo:
                    type: integer
                  approved:
                    type: boolean
      description: |-
        Friend Request内にあるボタンを押す際に発火。
        既存のフォロー申請のapprovedをfalseからtrueに変更する。
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                approved:
                  type: boolean
        description: 既存のフォロー申請のapprovedをfalseからtrueに変更する。
    delete:
      summary: deleteFollowAPI
      operationId: delete-api-user-approval
      responses:
        '204':
          description: OK
      description: フォローの削除
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: integer
          in: query
          name: '/${approvalId}'
  /api/post/:
    get:
      summary: fetchPostsAPI
      tags:
        - post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    postFrom:
                      type: object
                      properties:
                        id:
                          type: integer
                        displayName:
                          type: string
                        about:
                          type: string
                        avatar:
                          type: string
                    content:
                      type: string
      operationId: get-api-post
      description: |-
        投稿一覧の取得
        投稿の詳細取得はOPTIONSに記述しています！
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
    post:
      summary: createPostAPI
      operationId: post-api-post
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  postFrom:
                    type: object
                    properties:
                      id:
                        type: integer
                      displayName:
                        type: string
                      about:
                        type: string
                      avatar:
                        type: string
                  content:
                    type: string
      description: 投稿の作成
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                postFromId:
                  type: integer
      tags:
        - post
    put:
      summary: editPostAPI
      operationId: put-api-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  postFrom:
                    type: object
                    properties:
                      id:
                        type: integer
                      displayName:
                        type: string
                      about:
                        type: string
                      avatar:
                        type: string
                  content:
                    type: string
      description: 投稿内容の変更
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: integer
          in: query
          name: '/${postId}/'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                postFromId:
                  type: integer
        description: ''
      tags:
        - post
    delete:
      summary: deletePostAPI
      operationId: delete-api-post
      responses:
        '204':
          description: OK
      description: 投稿内容の削除
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: string
          in: query
          name: '/${postId}/'
      tags:
        - post
    options:
      summary: fetchPostAPI
      operationId: options-api-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  postFrom:
                    type: object
                    properties:
                      id:
                        type: integer
                      displayName:
                        type: string
                      about:
                        type: string
                      avatar:
                        type: string
                  content:
                    type: string
      description: 投稿の個別取得
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: string
          in: query
          name: '/${postId}/`'
      tags:
        - post
  /api/post/myposts/:
    get:
      summary: fetchUserPostsAPI
      tags:
        - post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    postFrom:
                      type: object
                      properties:
                        id:
                          type: integer
                        displayName:
                          type: string
                        about:
                          type: string
                        avatar:
                          type: string
                    content:
                      type: string
              examples:
                example-1:
                  value:
                    - id: 0
                      postFrom:
                        id: 0
                        displayName: string
                        about: string
                        avatar: string
                      contant: string
      operationId: get-api-post-myposts
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
      description: |-
        ログインしているユーザの投稿一覧を取得
        マイプロフィールページで取得したデータを展開する。
  /api/post/friend-posts/:
    get:
      summary: Your GET endpoint
      tags:
        - post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  postFrom:
                    type: object
                    properties:
                      　id:
                        type: integer
                      displayName:
                        type: string
                      about:
                        type: string
                      avatar:
                        type: string
                  content:
                    type: string
      operationId: get-api-post-friend-posts
      description: 友人の詳細ページで取得したデータを展開
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
        - schema:
            type: integer
          in: query
          name: friendId
          description: 投稿詳細がほしいフレンドのID
  /api/dm/message/:
    parameters: []
    post:
      summary: createDMAPI
      operationId: post-api-dm-message
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  sender:
                    type: integer
                  receiver:
                    type: integer
                  message:
                    type: string
      tags:
        - dm
      description: friendにdmを送信する
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: integer
                message:
                  type: string
  /api/dm/inbox/:
    get:
      summary: fetchDMsAPI
      tags:
        - dm
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    sender:
                      type: integer
                    receiver:
                      type: integer
                    message:
                      type: string
      operationId: get-api-dm-inbox
      description: ログインユーザに送信されているDMの一覧を受け取る
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: `Token ${token}`'
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        displayName:
          type: string
        avatar:
          type: string
        about:
          type: string
        created_at:
          type: string
        userPro:
          type: integer
          description: OneToOne Field Foreign Key with User model.
    FriendRequests:
      title: FriendRequests
      type: object
      x-examples: {}
      properties:
        askFrom:
          type: integer
        askTo:
          type: integer
        approved:
          type: boolean
          default: 'false'
      required:
        - askFrom
        - askTo
        - approved
    DirectMessages:
      title: DirectMessages
      type: object
      properties:
        sender:
          type: integer
        receiver:
          type: integer
        message:
          type: string
    Post:
      title: Post
      type: object
      properties:
        userId:
          type: integer
        content:
          type: string
      required:
        - userId
        - content
tags:
  - name: user
  - name: post
  - name: dm
