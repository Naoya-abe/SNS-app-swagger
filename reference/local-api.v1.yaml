openapi: 3.0.0
info:
  title: local api
  version: '1.0'
  description: API for the local environment.
servers:
  - url: 'http://localhost:8080'
paths:
  /api/user/signup/:
    post:
      summary: Create a new account
      operationId: post-api-user-create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  email:
                    type: string
      description: Create a new account with sign up
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
            examples: {}
    parameters: []
  /api/user/myprofile/:
    get:
      summary: Retrieve login user information
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-api-user-myprofile
      description: Retrieve login user information
      parameters: []
    parameters: []
  /api/user/profile/:
    parameters: []
    get:
      summary: Retrieve an user detail
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-api-users-userId
      description: ''
    put:
      summary: Update an user detail
      operationId: put-api-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Own account only
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    patch:
      summary: Partial update an user detail
      operationId: patch-api-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Own account only
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      summary: Delete an user account
      operationId: delete-api-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
      description: Own account only
    post:
      summary: ''
      operationId: post-api-user-profile-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /api/user/approval/:
    get:
      summary: Get friend requests
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FriendRequests'
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-api-user-approval
    post:
      summary: Post a friend request
      operationId: post-api-user-approval
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequests'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequests'
    put:
      summary: ''
      operationId: put-api-user-approval
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                $ref: '#/components/schemas/FriendRequests'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequests'
    patch:
      summary: ''
      operationId: patch-api-user-approval
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequests'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequests'
  /api/dm/inbox/:
    get:
      summary: Get direct messages to myself
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectMessages'
      operationId: get-api-dm-inbox
    parameters: []
  /api/dm/message/:
    post:
      summary: Post a direct message
      operationId: post-api-dm-message
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectMessages'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectMessages'
        description: ''
  /authen/:
    get:
      summary: Token Retrieval endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      operationId: get-authen
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
  /api/posts/:
    get:
      summary: Retrieve a list of posts
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
      operationId: get-api-posts
    post:
      summary: ''
      operationId: post-api-posts
      responses:
        '201':
          description: Created
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
    put:
      summary: ''
      operationId: put-api-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
    patch:
      summary: ''
      operationId: patch-api-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        description: ''
    delete:
      summary: ''
      operationId: delete-api-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        displayName:
          type: string
        avatar:
          type: string
        about:
          type: string
        created_at:
          type: string
        userPro:
          type: integer
          description: OneToOne Field Foreign Key with User model.
    FriendRequests:
      title: FriendRequests
      type: object
      x-examples: {}
      properties:
        askFrom:
          type: integer
        askTo:
          type: integer
        approved:
          type: boolean
          default: 'false'
      required:
        - askFrom
        - askTo
        - approved
    DirectMessages:
      title: DirectMessages
      type: object
      properties:
        sender:
          type: integer
        receiver:
          type: integer
        message:
          type: string
    Post:
      title: Post
      type: object
      properties:
        userId:
          type: integer
        content:
          type: string
      required:
        - userId
        - content
